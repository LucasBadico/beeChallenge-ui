{"version":3,"sources":["../../../../src/store/epics/form.js"],"names":["Rx","WILL_SAVE_FORM_FIELD","SAVE_FORM_FIELD","OPEN_FORM","REQUESTED_DATA","NOT_FINDED_DDD","WILL_SEND_FORM","log","openLeadOnNotFinded","action$","store","ofType","map","action","value","form","type","fetchData","body","url","Observable","ajax","method","responseType","crossDomain","withCredentials","headers","pluck","fetchService","debounceTime","mergeMap","state","getState","origin","destination","totalTime","costByMinute","buttler","defaultCost","mins","from","plan","min","toArray","switchMap","forkJoin","requestArray","zip","request","data"],"mappings":";;AAAA,OAAOA,EAAP,MAAe,MAAf;;AAEA,SACIC,oBADJ,EAEIC,eAFJ,EAGIC,SAHJ,EAIIC,cAJJ,EAKIC,cALJ,EAMIC,cANJ;;AASA,OAAOC,GAAP;;AAEA;AACA,OAAO,IAAMC,sBAAsB,SAAtBA,mBAAsB,CAACC,OAAD,EAAUC,KAAV;AAAA,WAAoBD,QAAQE,MAAR,CAAeV,oBAAf,EAClDW,GADkD,CAC9C,kBAAU;AACX,YAAIC,OAAOC,KAAP,KAAiBT,cAAjB,IAAmCQ,OAAOE,IAAP,KAAgB,YAAvD,EAAsE;AAClE,mBAAQ,EAAEC,MAAMb,SAAR,EAAmBY,MAAM,MAAzB,EAAR;AACH;AACD,4BACOF,MADP;AAEIG,kBAAMd;AAFV;AAIH,KATkD,CAApB;AAAA,CAA5B;;AAWP,IAAMe,YAAY,SAAZA,SAAY,CAACC,IAAD,EAAOC,GAAP;AAAA,WAAgBZ,IAAI,EAACW,UAAD,EAAOC,QAAP,EAAJ,GAAkBnB,GAAGoB,UAAH,CAAcC,IAAd,CAAmB;AACnEF,uCAA6BA,GADsC;AAEnEG,gBAAQ,MAF2D;AAGnEC,sBAAc,MAHqD;AAInEC,qBAAa,IAJsD;AAKnEC,yBAAiB,IALkD;AAMnE;AACA;AACA;AACAC,iBAAS;AACL,4BAAgB,kBADX;AAEL,yBAAa;AAFR,SAT0D;AAanER;AAbmE,KAAnB,EAcjDS,KAdiD,CAc3C,MAd2C,CAAlC;AAAA,CAAlB;;AAgBA,OAAO,IAAMC,eAAe,SAAfA,YAAe,CAACnB,OAAD,EAAUC,KAAV;AAAA,WAAoBD,QAAQE,MAAR,CAAeL,cAAf,EAC3CuB,YAD2C,CAC9B,GAD8B,EAE3CC,QAF2C,CAGxC,kBAAU;AACN;AACI,YAAMC,QAAQrB,MAAMsB,QAAN,EAAd;AAFE,oCAOED,MAAMhB,IAAN,CAAWF,OAAOE,IAAlB,CAPF;AAAA,YAIEkB,MAJF,yBAIEA,MAJF;AAAA,YAKEC,WALF,yBAKEA,WALF;AAAA,YAMEC,SANF,yBAMEA,SANF;;AAQF,YAAMC,eAAeL,MAAMM,OAAN,CAAcC,WAAd,CAA0BL,MAA1B,EAAkCC,WAAlC,CAArB;AACA,YAAMf,MAAM,uBAAZ;AACA,YAAMoB,OAAO,CAAC,IAAD,CAAb;;AAEA,eAAOvC,GAAGoB,UAAH,CACFoB,IADE,CACGD,IADH,EAEF3B,GAFE,CAEE;AAAA,mBAAOK,UAAU;AAClBmB,0CADkB;AAElBD,oCAFkB;AAGlBM,mCAAiBC;AAHC,aAAV,EAITvB,GAJS,CAAP;AAAA,SAFF,EAOFwB,OAPE,GAQFC,SARE,CAQQ;AAAA,mBAAgB5C,GAAGoB,UAAH,CAAcyB,QAAd,CAAuBC,YAAvB,CAAhB;AAAA,SARR,EASFC,GATE,CASER,IATF,EAUF3B,GAVE,CAUE;AAAA,mBAAS;AACVI,sBAAMZ,cADI;AAEV4C,yBAAS,YAFC;AAGVC;AAHU,aAAT;AAAA,SAVF,CAAP;AAeJ;AAEH,KAhCuC,CAApB;AAAA,CAArB;AAkCP","file":"form.js","sourcesContent":["import Rx from 'rxjs'\n\nimport {\n    WILL_SAVE_FORM_FIELD,\n    SAVE_FORM_FIELD,\n    OPEN_FORM,\n    REQUESTED_DATA,\n    NOT_FINDED_DDD,\n    WILL_SEND_FORM,\n} from 'store/actions'\n\nimport log from 'log'\n\n// Caso tenha um valor tal ativa o outro formulario\nexport const openLeadOnNotFinded = (action$, store) => action$.ofType(WILL_SAVE_FORM_FIELD)\n    .map(action => {\n        if (action.value === NOT_FINDED_DDD && action.form === 'calculator' ) {\n            return ({ type: OPEN_FORM, form: 'lead' })\n        }\n        return {\n            ...action,\n            type: SAVE_FORM_FIELD\n        }\n    })\n\nconst fetchData = (body, url) => (log({body, url}), Rx.Observable.ajax({\n    url: `http://localhost:3030${url}`,\n    method: 'POST',\n    responseType: 'json',\n    crossDomain: true,\n    withCredentials: true,\n    // createXHR: function () {\n    //     return new XMLHttpRequest();\n    //   },\n    headers: {\n        'Content-Type': 'application/json',\n        'x-rxjs-is': 'Awesome And Trick >_<\"',\n    },\n    body,\n}).pluck('data'))\n\nexport const fetchService = (action$, store) => action$.ofType(WILL_SEND_FORM)\n    .debounceTime(500)\n    .mergeMap(\n        action => {\n            // if (action.form === 'calculator') {\n                const state = store.getState()\n                const {\n                    origin,\n                    destination,\n                    totalTime,\n                } = state.form[action.form]\n                const costByMinute = state.buttler.defaultCost[origin][destination]\n                const url = '/calculator/fale-mais'\n                const mins = ['30']\n                \n                return Rx.Observable\n                    .from(mins)\n                    .map(min => fetchData({\n                        costByMinute,\n                        totalTime,\n                        plan: `FaleMais${min}`,\n                    }, url))\n                    .toArray()\n                    .switchMap(requestArray => Rx.Observable.forkJoin(requestArray))\n                    .zip(mins)\n                    .map(data => ({\n                        type: REQUESTED_DATA,\n                        request: 'calculator',\n                        data,\n                    }))\n            // }\n            \n        }\n    )\n/*\n  url: 'https://httpbin.org/post',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-rxjs-is': 'Awesome!'\n  },\n  body: {\n    hello: 'World!',\n  }\n\n  .toArray()\n  .switchMap(requestArray => Rx.Observable.forkJoin(requestArray))\n  .zip(projectIds)\n\n.mergeMap(action =>\n        race(\n        timer(2000).mapTo({ type: OPEN_N_M }),\n        action$.ofType(EPT_CANCEL_OPEN_N_M)\n            .take(1),\n       ),\n*/"]}
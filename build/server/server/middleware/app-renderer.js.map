{"version":3,"sources":["../../../../src/server/middleware/app-renderer.jsx"],"names":["renderToString","createMemoryHistory","match","RouterContext","syncHistoryWithStore","Provider","StyleSheetServer","routes","React","renderIndex","Store","wrap","fs","path","assetMap","JSON","parse","readFileSync","join","req","res","memoryHistory","url","store","history","data","location","error","redirectLocation","renderProps","status","send","message","redirect","pathname","search","renderStatic","html","css"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,mBAAT,EAA8BC,KAA9B,EAAqCC,aAArC,QAA0D,cAA1D;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,MAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP;AACA,OAAOC,KAAP;AACA,OAAOC,IAAP;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,IAAIC,WAAW;AACb,eAAa;AADA,CAAf;AAGA,IAAI,iBAAyB,YAA7B,EAA2C;AACzCA,aAAWC,KAAKC,KAAL,CACTJ,GAAGK,YAAH,CACEJ,KAAKK,IAAL,sCADF,CADS,CAAX;AAKD;;AAED,eAAeP;AAAA,qEAAK,iBAAOQ,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,yBADY,GACIpB,oBAAoBkB,IAAIG,GAAxB,CADJ;AAEZC,iBAFY,GAEJ,IAAIb,KAAJ,CAAUW,aAAV,CAFI;AAGZG,mBAHY,GAGFpB,qBAAqBiB,aAArB,EAAoCE,MAAME,IAA1C,CAHE;;;AAKlBvB,kBAAM;AACJsB,8BADI;AAEJjB,4BAFI;AAGJmB,wBAAUP,IAAIG;AAHV,aAAN,EAIG,UAACK,KAAD,EAAQC,gBAAR,EAA0BC,WAA1B,EAA0C;AAC3C,kBAAIF,KAAJ,EAAW;AACTP,oBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,MAAMK,OAA3B;AACD,eAFD,MAEO,IAAIJ,gBAAJ,EAAsB;AAC3BR,oBAAIa,QAAJ,CAAa,GAAb,EAAkBL,iBAAiBM,QAAjB,GAA4BN,iBAAiBO,MAA/D;AACD,eAFM,MAEA,IAAIN,WAAJ,EAAiB;AAAA,4CACAvB,iBAAiB8B,YAAjB,CAA8B;AAAA,yBAAMpC,eACxD;AAAC,4BAAD;AAAA,sBAAU,OAAOuB,MAAME,IAAvB;AAAA;AAAA;AACE,wCAAC,aAAD,eAAmBI,WAAnB;AAAA;AAAA;AAAA;AADF,mBADwD,CAAN;AAAA,iBAA9B,CADA;AAAA,oBACdQ,IADc,yBACdA,IADc;AAAA,oBACRC,GADQ,yBACRA,GADQ;;AAQtBlB,oBAAIW,IAAJ,CAAStB,YAAY4B,IAAZ,EAAkBC,GAAlB,EAAuBxB,QAAvB,EAAiCS,MAAME,IAAvC,CAAT;AACD,eATM,MASA;AACLL,oBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,WAArB;AACD;AACF,aArBD;;AALkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAAf","file":"app-renderer.js","sourcesContent":["import { renderToString } from 'react-dom/server'\nimport { createMemoryHistory, match, RouterContext } from 'react-router'\nimport { syncHistoryWithStore } from 'react-router-redux'\nimport { Provider } from 'react-redux'\nimport { StyleSheetServer } from 'aphrodite/no-important'\nimport routes from '../../routes'\nimport React from 'react'\nimport renderIndex from './render-index'\nimport Store from '../../store'\nimport wrap from '../wrap'\nimport fs from 'fs'\nimport path from 'path'\n\nlet assetMap = {\n  'bundle.js': 'bundle.js'\n}\nif (process.env.NODE_ENV === 'production') {\n  assetMap = JSON.parse(\n    fs.readFileSync(\n      path.join(process.env.ASSETS_DIR, process.env.ASSETS_MAP_FILE)\n    )\n  )\n}\n\nexport default wrap(async (req, res) => {\n  const memoryHistory = createMemoryHistory(req.url)\n  const store = new Store(memoryHistory)\n  const history = syncHistoryWithStore(memoryHistory, store.data)\n\n  match({\n    history,\n    routes,\n    location: req.url\n  }, (error, redirectLocation, renderProps) => {\n    if (error) {\n      res.status(500).send(error.message)\n    } else if (redirectLocation) {\n      res.redirect(302, redirectLocation.pathname + redirectLocation.search)\n    } else if (renderProps) {\n      const { html, css } = StyleSheetServer.renderStatic(() => renderToString(\n        <Provider store={store.data}>\n          <RouterContext {...renderProps} />\n        </Provider>\n        )\n      )\n\n      res.send(renderIndex(html, css, assetMap, store.data))\n    } else {\n      res.status(404).send('Not found')\n    }\n  })\n})\n"]}
{"version":3,"sources":["../../src/log.js"],"names":["minilog","rollbar","isClient","window","logInstance","enable","existingErrorLogger","error","err","Rollbar","enableRollbar","suggest","deny","pipe","backends","console","formatWithStack","stack","handleError","reportMessage","ex","log"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,SAApB;;AAEA,SAASC,QAAT,GAAoB;AAClB,SAAO,OAAOC,MAAP,KAAkB,WAAzB;AACD;;AAED,IAAIC,cAAc,IAAlB;;AAEA,IAAIF,UAAJ,EAAgB;AACdF,UAAQK,MAAR;AACAD,gBAAcJ,QAAQ,QAAR,CAAd;AACA,MAAMM,sBAAsBF,YAAYG,KAAxC;AACAH,cAAYG,KAAZ,GAAoB,UAACC,GAAD,EAAS;AAC3BL,WAAOM,OAAP,CAAeF,KAAf,CAAqBC,GAArB;AACAF,wBAAoBE,GAApB;AACD,GAHD;AAID,CARD,MAQO;AACL,MAAIE,gBAAgB,KAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAV,UAAQW,OAAR,CAAgBC,IAAhB,CAAqB,IAArB,EAA2B,iBAAyB,aAAzB,GAAyC,OAAzC,GAAmD,OAA9E;;AAEAZ,UAAQK,MAAR,GACGQ,IADH,CACQb,QAAQc,QAAR,CAAiBC,OAAjB,CAAyBC,eADjC,EAEGH,IAFH,CAEQb,QAAQc,QAAR,CAAiBC,OAFzB;;AAIAX,gBAAcJ,QAAQ,SAAR,CAAd;AACA,MAAMM,uBAAsBF,YAAYG,KAAxC;AACAH,cAAYG,KAAZ,GAAoB,UAACC,GAAD,EAAS;AAC3BF,yBAAoBE,IAAIS,KAAJ,GAAYT,IAAIS,KAAhB,GAAwBT,GAA5C;AACA,QAAI;AACF,UAAIE,aAAJ,EAAmB;AACjB,YAAI,QAAOF,GAAP,yCAAOA,GAAP,OAAe,QAAnB,EAA6B;AAC3BP,kBAAQiB,WAAR,CAAoBV,GAApB;AACD,SAFD,MAEO,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAClCP,kBAAQkB,aAAR,CAAsBX,GAAtB;AACD,SAFM,MAEA;AACLP,kBAAQkB,aAAR,CAAsB,yCAAtB;AACD;AACF;AACF,KAVD,CAUE,OAAOC,EAAP,EAAW;AACXnB,cAAQkB,aAAR,CAAsB,sCAAtB;AACD;AACF,GAfD;AAgBD;;AAED,IAAME,MAAMjB,WAAZ;AACA,eAAeiB,GAAf","file":"log.js","sourcesContent":["import minilog from 'minilog'\nimport rollbar from 'rollbar'\n\nfunction isClient() {\n  return typeof window !== 'undefined'\n}\n\nlet logInstance = null\n\nif (isClient()) {\n  minilog.enable()\n  logInstance = minilog('client')\n  const existingErrorLogger = logInstance.error\n  logInstance.error = (err) => {\n    window.Rollbar.error(err)\n    existingErrorLogger(err)\n  }\n} else {\n  let enableRollbar = false\n  // if (process.env.NODE_ENV === 'production') {\n  //   enableRollbar = true\n  //   rollbar.init(process.env.ROLLBAR_ACCESS_TOKEN)\n  //   const options = {\n  //     exitOnUncaughtException: false\n  //   }\n  //   rollbar.handleUncaughtExceptions(process.env.ROLLBAR_ACCESS_TOKEN, options)\n  // }\n\n  minilog.suggest.deny(/.*/, process.env.NODE_ENV === 'development' ? 'debug' : 'debug')\n\n  minilog.enable()\n    .pipe(minilog.backends.console.formatWithStack)\n    .pipe(minilog.backends.console)\n\n  logInstance = minilog('backend')\n  const existingErrorLogger = logInstance.error\n  logInstance.error = (err) => {\n    existingErrorLogger(err.stack ? err.stack : err)\n    try {\n      if (enableRollbar) {\n        if (typeof err === 'object') {\n          rollbar.handleError(err)\n        } else if (typeof err === 'string') {\n          rollbar.reportMessage(err)\n        } else {\n          rollbar.reportMessage('Got backend error with no error message')\n        }\n      }\n    } catch (ex) {\n      rollbar.reportMessage('Error converting message to rollbar.')\n    }\n  }\n}\n\nconst log = logInstance\nexport default log\n"]}
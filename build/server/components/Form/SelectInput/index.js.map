{"version":3,"sources":["../../../../../src/components/Form/SelectInput/index.jsx"],"names":["React","PropTypes","css","connect","Select","log","saveFormField","styles","SelectInputWrapper","dispatch","formState","field","form","props","textInput","value","SelectInput","propTypes","name","string","isRequired","object","options","arrayOf","any"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,GAAT,QAAoB,wBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,GAAP;AACA,SAASC,aAAT;AACA,OAAOC,MAAP;;AAEO,IAAMC,qBAAqB,SAArBA,kBAAqB,OAAoD;AAAA,QAAjDC,QAAiD,QAAjDA,QAAiD;AAAA,QAAvCC,SAAuC,QAAvCA,SAAuC;AAAA,QAA5BC,KAA4B,QAA5BA,KAA4B;AAAA,QAArBC,IAAqB,QAArBA,IAAqB;AAAA,QAAZC,KAAY;;AAClF,WACI,oBAAC,MAAD;AACI,eAAO,SAAO,CAACD,IAAD,EAAOD,KAAP,CAAP,EAAqBD,SAArB,CADX;AAEI,mBAAWR,IAAIK,OAAOO,SAAX,CAFf;AAGI,kBAAU;AAAA,gBAAEC,KAAF,SAAEA,KAAF;AAAA,mBAAaN,SACnBH,cAAcM,IAAd,EAAoBD,KAApB,EAA2BI,KAA3B,CADmB,CAAb;AAAA;AAHd,OAMQF,KANR;AAAA;AAAA;AAAA,OADJ;AAUH,CAXM;;;AAaP,OAAO,IAAMG,cAAcb,QACvB;AAAA,QAAGS,IAAH,SAAGA,IAAH;AAAA,WAAe,EAAEF,WAAWE,IAAb,EAAf;AAAA,CADuB,EAEvB,UAACH,QAAD;AAAA,WAAe,EAAEA,kBAAF,EAAf;AAAA,CAFuB,EAGzBD,kBAHyB,CAApB;;AAKPA,mBAAmBS,SAAnB,GAA+B;AAC/B;AACIC,UAAMjB,UAAUkB,MAAV,CAAiBC,UAFI;AAG3BT,WAAOV,UAAUkB,MAAV,CAAiBC,UAHG;AAI3BR,UAAMX,UAAUkB,MAAV,CAAiBC,UAJI;AAK3BV,eAAWT,UAAUoB,MALM;AAM3BC,aAASrB,UAAUsB,OAAV,CAAkBtB,UAAUuB,GAA5B;AANkB,CAA/B","file":"index.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\nimport { css } from 'aphrodite/no-important'\nimport { connect } from 'react-redux'\nimport * as R from 'ramda'\nimport Select from 'react-select'\nimport log from 'log'\nimport { saveFormField } from 'store/actions'\nimport styles from './styles'\n\nexport const SelectInputWrapper = ({ dispatch, formState, field, form, ...props }) => {\n    return (\n        <Select\n            value={R.path([form, field],formState)}\n            className={css(styles.textInput)}\n            onChange={({value}) => dispatch(\n                saveFormField(form, field, value)\n            )}\n            {...props}\n        />\n    )\n}\n\nexport const SelectInput = connect(\n    ({ form }) => ({ formState: form }),\n    (dispatch) => ({ dispatch })\n)(SelectInputWrapper)\n  \nSelectInputWrapper.propTypes = {\n// props validation go in here\n    name: PropTypes.string.isRequired,\n    field: PropTypes.string.isRequired,\n    form: PropTypes.string.isRequired,\n    formState: PropTypes.object,\n    options: PropTypes.arrayOf(PropTypes.any)\n}\n  "]}
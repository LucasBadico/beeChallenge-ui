{"version":3,"sources":["../../../../../src/components/Form/TextInput/index.jsx"],"names":["React","PropTypes","css","connect","log","styles","saveFormField","TextInputWrapped","formState","form","dispatch","field","props","textInput","value","target","TextInput","propTypes","type","string","isRequired","object","placeholder"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,GAAT,QAAoB,wBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,GAAP;AACA,OAAOC,MAAP;;AAEA,SACEC,aADF;;AAIO,IAAMC,mBAAmB,SAAnBA,gBAAmB,OAAoD;AAAA,MAAjDC,SAAiD,QAAjDA,SAAiD;AAAA,MAAtCC,IAAsC,QAAtCA,IAAsC;AAAA,MAAhCC,QAAgC,QAAhCA,QAAgC;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAZC,KAAY;;AAClF,SACE;AACE,eAAWV,IAAIG,OAAOQ,SAAX,CADb;AAEE,WAAO,SAAO,CAACJ,IAAD,EAAOE,KAAP,CAAP,EAAsBH,SAAtB,CAFT;AAGE,cAAU;AAAA,UAAaM,KAAb,SAAGC,MAAH,CAAaD,KAAb;AAAA,aAA2BJ,SACnCJ,cAAcG,IAAd,EAAoBE,KAApB,EAA2BG,KAA3B,CADmC,CAA3B;AAAA;AAHZ,KAMMF,KANN;AAAA;AAAA;AAAA,KADF;AAUD,CAXM;;;AAaP,OAAO,IAAMI,YAAYb,QACvB;AAAA,MAAGM,IAAH,SAAGA,IAAH;AAAA,SAAe,EAAED,WAAWC,IAAb,EAAf;AAAA,CADuB,EAEvB,UAACC,QAAD;AAAA,SAAe,EAAEA,kBAAF,EAAf;AAAA,CAFuB,EAGvBH,gBAHuB,CAAlB;;AAKPA,iBAAiBU,SAAjB,GAA6B;AACzB;AACAC,QAAMjB,UAAUkB,MAAV,CAAiBC,UAFE;AAGzBT,SAAOV,UAAUkB,MAHQ;AAIzBV,QAAMR,UAAUkB,MAJS;AAKzBX,aAAWP,UAAUoB,MALI;AAMzBC,eAAarB,UAAUkB;AANE,CAA7B","file":"index.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport * as R from 'ramda' \nimport { css } from 'aphrodite/no-important'\nimport { connect } from 'react-redux'\nimport log from 'log'\nimport styles from './styles'\n\nimport {\n  saveFormField\n} from 'store/actions'\n\nexport const TextInputWrapped = ({ formState, form, dispatch, field, ...props }) => {\n  return (\n    <input\n      className={css(styles.textInput)}\n      value={R.path([form, field], formState)}\n      onChange={({ target: { value } }) => dispatch(\n        saveFormField(form, field, value)\n      )}\n      {...props}\n    />\n  )\n}\n\nexport const TextInput = connect(\n  ({ form }) => ({ formState: form }),\n  (dispatch) => ({ dispatch })\n)(TextInputWrapped)\n  \nTextInputWrapped.propTypes = {\n    // props validation go in here\n    type: PropTypes.string.isRequired,\n    field: PropTypes.string,\n    form: PropTypes.string,\n    formState: PropTypes.object,\n    placeholder: PropTypes.string,\n}\n  "]}